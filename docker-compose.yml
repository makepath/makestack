version: '3.8'
services:
  backend:
    platform: linux/amd64
    image: mapstack/backend
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    volumes:
      - './backend:/code'
    env_file: ./.env
    command: |
      sh -c 'python manage.py runserver 0.0.0.0:8000'
    depends_on:
      db:
        condition: service_healthy

  celery:
    platform: linux/amd64
    image: mapstack/backend
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    volumes:
      - './backend:/code'
    env_file: ./.env
    command: |
      sh -c 'celery -A config worker -l info'
    depends_on:
      backend:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_started

  db:
    platform: linux/amd64
    image: 'postgis/postgis:14-3.2'
    volumes:
      - 'db-data:/var/lib/postgresql/data'
    env_file: ./.env
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5

  geoserver:
    platform: linux/amd64
    image: mapstack/geoserver
    volumes:
      - 'geoserver-data:/opt/geoserver/data_dir'
    build:
      context: .
      dockerfile: docker/geoserver/Dockerfile
    env_file: ./.env
    depends_on:
      db:
        condition: service_healthy

  mapshader:
    platform: linux/amd64
    image: mapstack/mapshader
    volumes:
      - './mapshader:/code'
    build:
      context: .
      dockerfile: docker/mapshader/Dockerfile
    env_file: ./.env
    command: |
      sh -c 'mapshader serve'

  redis:
    platform: linux/amd64
    image: 'redis:6.2.6'

  nginx:
    platform: linux/amd64
    image: mapstack/nginx
    ports:
      - '80:80'
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    depends_on:
      - backend
      - geoserver
      - mapshader

volumes:
  db-data: {}
  geoserver-data: {}
